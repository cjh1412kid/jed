<!DOCTYPE HTML>
<html>

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="maximum-scale=1.0, minimum-scale=1.0, user-scalable=0, initial-scale=1.0, width=device-width" />
	<meta name="format-detection" content="telephone=no, email=no, date=no, address=no">
	<title>Hello APP</title>
	<link rel="stylesheet" type="text/css" href="../css/aui2x1/aui.css" />
	<link rel="stylesheet" type="text/css" href="../css/common/style.css" />
	<link rel="stylesheet" type="text/css" href="../css/main.css" />
	<style>

	</style>
</head>

<body>
</body>
<script type="text/javascript" src="../script/api.js"></script>
<script type="text/javascript" src="../script/common/common.js"></script>
<script type="text/javascript" src="../script/common/visitor_tips.js"></script>
<script type="text/javascript">
	/*
	 *获取所点击商品的详细信息, 参数isSearch:是否搜索(0:不是, 1:是), isScan:是否从扫描器中进入商品详情页
	 */
	function toGoodsDetailWin(_seq, _goodId, _isScan) {
		_execScript("search_win", "search_history_frm", "addHistory(" + _seq + ", '" + _goodId + "')"); // 跳转商品详情前, 新增一条搜索记录
		var pageParam = {
			seq: _seq,
			isSearch: 1,
			isScan: _isScan
		};
		_openWin("goods_detail_win", "../html/goods/detail/goods_detail_win.html", pageParam);
	}

	function showMenuPop(_obj) {
		api.execScript({
			frameName: 'tab_content_1',
			script: 'showPopup("top-right");'
		});
	}

	function toNextWin(name, url) {
		_execScript("", "tab_content_1", "closePopup();");
		_openWin(name, url);
	}

	function openTipsFrm(_message) {
		var rect = {
			x: 0, //左上角x坐标
			y: 0, //左上角y坐标
			w: "auto", //宽度，若传'auto'，页面从x位置开始自动充满父页面宽度
			h: "auto", //高度，若传'auto'，页面从y位置开始自动充满父页面高度
			marginLeft: 0, //相对父 window 左外边距的距离
			marginTop: 30, //相对父 window 上外边距的距离
			marginBottom: 0, //相对父 window 下外边距的距离
			marginRight: 0 //相对父 window 右外边距的距离
		};
		var pageParam = {
			message: _message
		};
		var bounces = false;
		var reload = true;
		var allowEdit = false;
		var animation = {
			type: "none", //动画类型（详见动画类型常量）
			subType: "from_right", //动画子类型（详见动画子类型常量）
			duration: 300 //动画过渡时间，默认300毫秒
		}
		_openFrame("tips_frm", "tips_frm.html", rect, pageParam, bounces, reload, allowEdit, animation);
	}

	function closeTipsFrm() {
		api.closeFrame({
			name: "tips_frm"
		});
	}

	// ~~~~~~~~~~~~~~~~~~~~~~融云对象方法 BEGIN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// 5.0 获取会话列表
	function rong_getConversationList() {
		rong.getConversationList(function(ret, err) {
			rongUnreadMessageCount = 0;
			if (!_isArrayNull(err)) {
				console.log("获取会话列表getConversationList    err:" + $api.jsonToStr(err));
			}
			if (ret) {
				console.log("获取会话列表getConversationList    ret:" + $api.jsonToStr(ret));
				if (ret.status == "success") {
					var _result = ret.result;
					if (!_isArrayNull(_result)) {
						for (var i = 0; i < _result.length; i++) {
							rongUnreadMessageCount += _result[i].unreadMessageCount;
						}
					}
				}
				// 渲染列表
				//					showMsgList(ret.result);
			}
			console.log("rongUnreadMessageCount:" + rongUnreadMessageCount);
			//				initUnreadMessageDotUI();
			_sendEvent("rongUnreadMessageCountChangedEvent", {
				rongUnreadMessageCount: rongUnreadMessageCount
			});
		})
	}

	// 6.0 统一发送消息接口
	// @msgType：消息类型，文字，图片，语言，地图，天气
	// @conversationType：会话类型，单聊（PRIVATE），讨论组（DISCUSSION），群组（GROUP），聊天室（CHATROOM），客服（CUSTOMER_SERVICE），（SYSTEM）
	// @targetId：接受方ID，可以是用户 Id、讨论组 Id、群组 Id 或聊天室 Id
	// @content：发送内容
	// @extra：用户自定义数据,一般extra是用户+token组装的json字符串
	function rong_sendMsg(msgType, conversationType, targetId, content, extra) {
		switch (msgType) {
			// 发送文字消息
			case "text":
				rong.sendTextMessage({
					conversationType: conversationType,
					targetId: targetId + "",
					text: content,
					extra: extra
				}, function(ret, err) {
					console.log("sendTextMessage.ret:" + $api.jsonToStr(ret));
					console.log("sendTextMessage.err:" + $api.jsonToStr(err));
					//					api.toast({
					//	                    msg:'status:'+ret.status
					//                  });
					if (ret.status == 'prepare') {
						// 存储当前发送信息
						//							_setStorage((ret.result.message.messageId).toString(), ret);
						$api.setStorage((ret.result.message.messageId).toString(), ret);
						// 广播消息，发送准备中
						_sendEvent("sendMsgPrepare", ret.result.message);
					} else if (ret.status == 'success') {
						// 广播消息，发送成功
						_sendEvent("sendMsgSuccess", ret.result.message);
						// 设置发送会话
						sendMsgSuccessEnd($api.getStorage((ret.result.message.messageId).toString()));
						//							sendMsgSuccessEnd(_getStorage((ret.result.message.messageId).toString()));
					} else if (ret.status == 'error') {
						// 广播消息，发送失败
						_sendEvent("sendMsgError", {
							errcode: err.code,
							messageId: ret.result.message.messageId
						});
					}
				});
				break;
				// 发送语音
			case "voice":
				rong.sendVoiceMessage({
					conversationType: conversationType,
					targetId: targetId + "",
					voicePath: content,
					duration: $api.strToJson(extra).duration,
					extra: extra
				}, function(ret, err) {
					if (ret.status == 'prepare') {
						// 存储当前发送信息
						//							_setStorage((ret.result.message.messageId).toString(), ret);
						$api.setStorage((ret.result.message.messageId).toString(), ret);
						// 广播消息，发送准备中
						_sendEvent("sendMsgPrepare", ret.result.message);
					} else if (ret.status == 'success') {
						// 广播消息，发送成功
						_sendEvent("sendMsgSuccess", ret.result.message);
						// 设置发送会话
						//							sendMsgSuccessEnd(_getStorage((ret.result.message.messageId).toString()));
						sendMsgSuccessEnd($api.getStorage((ret.result.message.messageId).toString()));
					} else if (ret.status == 'error') {
						// 广播消息，发送失败
						_sendEvent("sendMsgError", {
							errcode: err.code,
							messageId: ret.result.message.messageId
						});
					}
				});
				break;
				// 发送图片
			case "image":
				rong.sendImageMessage({
					conversationType: conversationType,
					targetId: targetId + "",
					imagePath: content,
					extra: extra
				}, function(ret, err) {
					console.log("rong.sendImageMessage.ret:" + $api.jsonToStr(ret));
					if (!_isObjectNull(err)) {
						console.log("rong.sendImageMessage.err:" + $api.jsonToStr(err));
					}
					if (ret.status == 'prepare') {
						// 存储当前发送信息
						//							_setStorage((ret.result.message.messageId).toString(), ret);
						$api.setStorage((ret.result.message.messageId).toString(), ret);
						// 广播消息，发送准备中
						_sendEvent("sendMsgPrepare", ret.result.message);
					} else if (ret.status == 'progress') {
						// 广播消息，发送过程中
						_sendEvent("sendMsgProgress", ret.result.progress);
					} else if (ret.status == 'success') {
						// 广播消息，发送成功
						_sendEvent("sendMsgSuccess", ret.result.message);
						// 设置发送会话
						//							sendMsgSuccessEnd(_getStorage((ret.result.message.messageId).toString()));
						sendMsgSuccessEnd($api.getStorage((ret.result.message.messageId).toString()));
					} else if (ret.status == 'error') {
						// 广播消息，发送失败
						_sendEvent("sendMsgError", {
							errcode: err.code,
							messageId: ret.result.message.messageId
						});
					}
				});
				break;
				// 发送图文
			case "richmsg":
				console.log("goodsShortData:" + content);
				var goodsShortData = $api.strToJson(content);
				rong.sendRichContentMessage({
					conversationType: conversationType,
					targetId: targetId + "",
					title: goodsShortData.goodId,
					description: goodsShortData.introduce,
					imageUrl: goodsShortData.image,
					extra: extra
				}, function(ret, err) {
					if (ret.status == 'prepare') {
						// 存储当前发送信息
						//							_setStorage((ret.result.message.messageId).toString(), ret);
						$api.setStorage((ret.result.message.messageId).toString(), ret);
						// 广播消息，发送准备中
						_sendEvent("sendMsgPrepare", ret.result.message);
					} else if (ret.status == 'success') {
						// 广播消息，发送成功
						_sendEvent("sendMsgSuccess", ret.result.message);
						// 设置发送会话
						//							sendMsgSuccessEnd(_getStorage((ret.result.message.messageId).toString()));
						sendMsgSuccessEnd($api.getStorage((ret.result.message.messageId).toString()));
					} else if (ret.status == 'error') {
						// 广播消息，发送失败
						_sendEvent("sendMsgError", {
							errcode: err.code,
							messageId: ret.result.message.messageId
						});
					}
				});
				break;
				// 发送位置信息
			case "location":
				rong.sendLocationMessage({
					conversationType: conversationType,
					targetId: targetId + "",
					latitude: $api.strToJson(extra).lat,
					longitude: $api.strToJson(extra).lon,
					poi: $api.strToJson(extra).poi,
					imagePath: content,
					extra: extra
				}, function(ret, err) {
					if (ret.status == 'prepare') {
						// 存储当前发送信息
						//							_setStorage((ret.result.message.messageId).toString(), ret);
						$api.setStorage((ret.result.message.messageId).toString(), ret);
						// 广播消息，发送准备中
						_sendEvent("sendMsgPrepare", ret.result.message);
					} else if (ret.status == 'progress') {
						// 广播消息，发送过程中
						_sendEvent("sendMsgProgress", ret.result.progress);
					} else if (ret.status == 'success') {
						// 广播消息，发送成功
						_sendEvent("sendMsgSuccess", ret.result.message);
						// 设置发送会话
						//							sendMsgSuccessEnd(_getStorage((ret.result.message.messageId).toString()));
						sendMsgSuccessEnd($api.getStorage((ret.result.message.messageId).toString()));
					} else if (ret.status == 'error') {
						// 广播消息，发送失败
						_sendEvent("sendMsgError", {
							errcode: err.code,
							messageId: ret.result.message.messageId
						});
					}
				});
				break;
				// 发送命令消息（自定义消息)
			case "cmd":
				rong.sendCommandNotificationMessage({
					conversationType: conversationType,
					targetId: targetId + "",
					name: $api.strToJson(extra).name,
					data: extra
				}, function(ret, err) {
					if (ret.status == 'prepare') {
						// 存储当前发送信息
						//							_setStorage((ret.result.message.messageId).toString(), ret);
						$api.setStorage((ret.result.message.messageId).toString(), ret);
						// 广播消息，发送准备中
						_sendEvent("sendMsgPrepare", ret.result.message);
					} else if (ret.status == 'success') {
						// 广播消息，发送成功
						_sendEvent("sendMsgSuccess", ret.result.message);
						// 设置发送会话
						//							sendMsgSuccessEnd(_getStorage((ret.result.message.messageId).toString()));
						sendMsgSuccessEnd($api.getStorage((ret.result.message.messageId).toString()));
					} else if (ret.status == 'error') {
						// 广播消息，发送失败
						_sendEvent("sendMsgError", {
							errcode: err.code,
							messageId: ret.result.message.messageId
						});
					}
				});
				break;
			default:
				break;
		}
	}

	// 7.0  获取最新消息记录
	// @conversationType：会话类型，单聊（PRIVATE），讨论组（DISCUSSION），群组（GROUP），聊天室（CHATROOM），客服（CUSTOMER_SERVICE），（SYSTEM）
	// @targetId：接受方ID，可以是用户 Id、讨论组 Id、群组 Id 或聊天室 Id
	function rong_getLatestMessages(conversationType, targetId) {
		rong.getLatestMessages({
			conversationType: conversationType,
			targetId: targetId,
			count: 20
		}, function(ret, err) {
			// 广播事件，通知成功获取到数据
			_sendEvent("getNewMsgEnd", ret.result);
		})
	}

	// 16、 获取历史纪录
	// @conversationType：会话类型，单聊（PRIVATE），讨论组（DISCUSSION），群组（GROUP），聊天室（CHATROOM），客服（CUSTOMER_SERVICE），（SYSTEM）
	// @targetId：接受方ID，可以是用户 Id、讨论组 Id、群组 Id 或聊天室 Id
	// @oldestMessageId：最后消息id
	function rong_getHistoryMessages(conversationType, targetId, oldestMessageId) {
		rong.getHistoryMessages({
			conversationType: 'PRIVATE',
			targetId: targetId,
			oldestMessageId: oldestMessageId,
			count: 20
		}, function(ret, err) {
			// 广播事件，通知成功获取到数据
			_sendEvent("getHistoryMsgEnd", ret.result);
		})
	}

	// 20、退出登录
	function rong_logout() {
		rong.logout(function(ret, err) {
			if (ret.status == 'error') {
				_alert(err);
			}
		});
	}

	// 22 断开连接
	function rong_disconnect() {
		rong.disconnect(false);
	}

	// 23 加入群
	function rong_joinGroup(groupId, groupName) {
		rong.joinGroup({
			groupId: groupId,
			groupName: groupName
		}, function(ret, err) {
			if (ret.status == 'success') {
				// 广播成功加入群事件
				_sendEvent("joinGroupSuccess");
			} else {
				// 广播加入群失败
				_sendEvent("joinGroupError");
			}
		})
	}

	// 24 删除会话
	function rong_removeConversation(conversationType, targetId) {
		rong.removeConversation({
			conversationType: conversationType,
			targetId: targetId
		}, function(ret, err) {
			if (ret.status == "success") {
				// 删除会话成功
				_sendEvent("removeChatSuccess");
			}
		})
	}

	// 25 退出群
	function rong_quitGroup(groupId) {
		rong.quitGroup({
			groupId: groupId
		}, function(ret, err) {
			if (ret.status == 'success') {
				// 退出群
				_sendEvent("quitGroupSuccess");
			} else {
				// 删除会话成功
				_sendEvent("quitGroupError");
			}
		})
	}

	// 清除会话未读数
	function rong_clearMessagesUnreadStatus(conversationType, targetId) {
		rong.clearMessagesUnreadStatus({
			conversationType: conversationType,
			targetId: targetId
		}, function(ret, err) {})
	}

	// 获取所有未读消息
	function rong_getTotalUnreadCount() {
		rong.getTotalUnreadCount(function(ret, err) {
			// 状态栏提醒
			api.notification({
				vibrate: [300, 500],
				sound: 'default',
				light: false,
				notify: {
					title: '您有' + ret.result + '条未读消息',
					content: '您有' + ret.result + '条未读消息',
					updateCurrent: false,
					extra: JSON.stringify(ret.result.message)
				}
			}, function(ret, err) {});
		});
	}

	// ~~~~~~~~~~~~~~~~~~~~~~融云对象方法 END  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	/**
	 *保存信息至自己服务器
	 */
	function saveMsgToOwnServer(obj) {
		console.log("obj:" + $api.jsonToStr(obj));
		var url = window.myServerUrl + "order/app/onlineMessage/addOnlineMessage";
		console.log("ajax.url:" + url);
		var _data = {
			values: {
				receiveObjectSeq: obj.result.message.targetId,
				receiveObjectType: obj.result.message.conversationType,
			},
			files: {}
		};
		if (!_isStringNull(obj.result.message.content.text)) {
			_data.values.content = obj.result.message.content.text;
		}
		if (!_isStringNull(obj.result.message.content.imageUrl)) {
			_data.files.img = obj.result.message.content.imageUrl;
		}
		if (!_isStringNull(obj.result.message.content.voicePath)) {
			_data.files.img = obj.result.message.content.voicePath;
		}
		console.log("_data:" + $api.jsonToStr(_data));
		_ajax(url, "addOnlineMessage", function(ret, err) {
			//					api.hideProgress();
			//				api.refreshHeaderLoadDone();
			if (ret) {
				console.log("ajax.addOnlineMessage.ret:" + $api.jsonToStr(ret));
				if (ret.code == 0) {
					//						customToast("保存信息至自己服务器成功!", 3000, "bottom");
				} else {
					//						customToast("保存信息至自己服务器失败!", 3000, "bottom");
					_toast(ret.msg);
				}
			} else {
				_toast(window.ajaxErrorMessage);
			}
		}, "post", _data);
	}

	// 14、显示列表数据
	function showMsgList(msglist) {
		if (msglist && msglist.length > 0) {
			for (var i = 0; i < msglist.length; i++) {
				var msgObj = msglist[i];
				msgObj.latestMessage.extra = $api.strToJson(msgObj.latestMessage.extra);
				if (msgObj.conversationType == "PRIVATE") {
					// 判断是否只自己发的
					if (userJson.seq == msgObj.senderUserId) {
						// 设置会话ID为targetID
						msgObj.chatId = msgObj.targetId;
						users.push(msgObj.targetId);
					} else {
						// 设置会话ID为targetID
						msgObj.chatId = msgObj.senderUserId;
						// 如果不是自己发的，则设置时间为接收时间
						msgObj.sentTime = msgObj.receivedTime;
						users.push(msgObj.senderUserId);
					}
				}
				// 是否是群
				else if (msgObj.conversationType == "GROUP") {
					// 设置会话ID为targetID
					msgObj.chatId = msgObj.targetId;
					users.push(msgObj.targetId);
				}
			}
			// 获取用户会话信息
			getUsersInfo(users.toString(), msglist);
		} else {
			api.refreshHeaderLoadDone();
		}
	}

	// 获取一组用户信息
	function getUsersInfo(ids, msglist) {
		var url = window.myServerUrl + window.interfaceConfig.getUsersByUserSeqs + "?userSeqs=" + ids;
		currentAjaxTag = window.interfaceConfig.getUsersByUserSeqs;
		isRequesting = true;
		console.log("ajax.url:" + url);
		console.log("ajax.tag:" + currentAjaxTag);
		_ajax(url, currentAjaxTag, function(ret, err) {
			isRequesting = false;
			//					api.hideProgress();
			//				api.refreshHeaderLoadDone();
			if (ret) {
				console.log("ajax." + currentAjaxTag + ".ret:" + $api.jsonToStr(ret));
				if (ret.statu == 1) {
					var users = ret.result;
					if (ret && users.length > 0) {
						for (var i = 0; i < msglist.length; i++) {
							var msgObj = msglist[i];
							// 查询用户信息
							for (var j = 0; j < users.length; j++) {
								var user = users[j];
								if (user.seq == msgObj.chatId) {
									// 追加新属性
									msgObj.chatInfo = user;
									break;
								}
							}
						}
						initUi(msglist, "html");
						// 设置不是首次获取数据了
						isFirst = false;
						//					api.hideProgress();
						api.refreshHeaderLoadDone();
					}
				} else {
					customToast(ret.message, 2000, "bottom");
				}
			} else {
				customToast("亲，网速不给力哦~", 3000, "bottom");
				console.log("ajax." + currentAjaxTag + ".err:" + $api.jsonToStr(err));
			}
		});
	}

	/**
	 *
	 */
	function initUi(msgList, type) {
		var htmlStr = "";
		console.log("msgList:" + $api.jsonToStr(msgList));
		for (var i = 0; i < msgList.length; i++) {
			var msgObject = msgList[i];
			htmlStr += "<li class='aui-list-item aui-list-item-middle' tapmode data-conversationType='" + msgObject.conversationType + "' data-targetId='" + msgObject.chatId + "' data-targetName='" + msgObject.chatInfo.username +
				"' onclick='startChat(this)'>";
			htmlStr += "<div class='aui-media-list-item-inner'>";
			htmlStr += "<div class='aui-list-item-media wechat-avatar'>";
			if (msgObject.unreadMessageCount == 0 || msgObject.unreadMessageCount == undefined) {
				htmlStr += "";
			} else {
				htmlStr += "<div class='aui-badge'>";
				htmlStr += msgObject.unreadMessageCount;
				htmlStr += "</div>";
			}
			htmlStr += "<img src='" + window.myServerUrl + msgObject.chatInfo.userphoto + "' />";
			htmlStr += "</div>";
			htmlStr += "<div class='aui-list-item-inner'>";
			htmlStr += "<div class='aui-list-item-text'>";
			htmlStr += "<div class='aui-list-item-title'>";
			htmlStr += msgObject.chatInfo.username;
			htmlStr += "</div>";
			htmlStr += "<div class='aui-list-item-right'>";
			htmlStr += _getFormatDate(msgObject.sentTime, "yyyy-MM-dd HH:mm:ss");
			htmlStr += "</div>";
			htmlStr += "</div>";
			htmlStr += "<div class='aui-list-item-text aui-font-size-12'>";
			htmlStr += setLastMsgText(msgObject, true);
			htmlStr += "</div>";
			htmlStr += "</div>";
			htmlStr += "</div>";
			htmlStr += "</li>";
			//				htmlStr += "<li class='aui-user-view-cell aui-img winu-clear-both winu-min-height' data-conversationType='" + msgObject.conversationType + "' data-targetId='" + msgObject.chatId + "' data-targetName='" + msgObject.chatInfo.username + "' onclick='startChat(this)'>";
			//				htmlStr += "<img class='aui-img-object aui-pull-left' src='" + window.myServerUrl + msgObject.chatInfo.userphoto + "' style='width:48px;height:48px;'>";
			//				htmlStr += "<div class='aui-img-body'>";
			//				htmlStr += "<span>" + msgObject.chatInfo.username + "<em class='btime'>";
			//				htmlStr += _getFormatDate(msgObject.sentTime, "yyyy-MM-dd HH:mm:ss");
			//				//				htmlStr += _formatDate(msgObject.sentTime);
			//				htmlStr += "</em></span>";
			//				htmlStr += "<p class='aui-ellipsis-1 msgnr'>";
			//				htmlStr += setLastMsgText(msgObject, true);
			//				if (msgObject.unreadMessageCount == 0 || msgObject.unreadMessageCount == undefined) {
			//					htmlStr += "";
			//				} else {
			//					htmlStr += "<font class='aui-pull-right unread'>" + msgObject.unreadMessageCount + "</font>";
			//				}
			//				htmlStr += "</p></div></li>";
		}
		if (type == "html") {
			$api.html($api.dom($api.byId("msglist"), "ul"), htmlStr);
		} else if (type == "prepend") {
			$api.prepend($api.dom($api.byId("msglist"), "ul"), htmlStr);
		}
	}

	function startChat(obj) {
		// 获取会话类型
		var conversationType = $api.attr(obj, "data-conversationType");
		// 获取目标ID
		var targetId = $api.attr(obj, "data-targetId");
		// 获取目标名称
		var targetName = $api.attr(obj, "data-targetName");
		// 打开会话页面
		var pageParam = {
			conversationType: conversationType,
			targetId: targetId,
			targetName: targetName
		};
		_openWin("chat_win", "../chat/chat_win.html", pageParam);
	}

	// 根据主键获取一个用户ID
	function getUserByID(userSeq, msgObj) {
		var url = window.myServerUrl + window.interfaceConfig.getUserByUserSeq + "?userSeq=" + userSeq;
		currentAjaxTag = window.interfaceConfig.getUserByUserSeq;
		isRequesting = true;
		console.log("ajax.url:" + url);
		console.log("ajax.tag:" + currentAjaxTag);
		_ajax(url, currentAjaxTag, function(ret, err) {
			isRequesting = false;
			//					api.hideProgress();
			//				api.refreshHeaderLoadDone();
			if (ret) {
				console.log("ajax." + currentAjaxTag + ".ret:" + $api.jsonToStr(ret));
				if (ret.statu == 1) {
					var users = ret.result;
					if (users.length > 0) {
						msgObj.chatId = msgObj.senderUserId;
						msgObj.chatInfo = users[0];
						msgObj.latestMessage = msgObj.content;
						msgObj.sentTime = msgObj.receivedTime;
						var _arr = [];
						_arr.push(msgObj);
						initUi(_arr, "prepend");
					}
				} else {
					customToast(ret.message, 2000, "bottom");
				}
			} else {
				customToast("亲，网速不给力哦~", 3000, "bottom");
				console.log("ajax." + currentAjaxTag + ".err:" + $api.jsonToStr(err));
			}
		});
	}

	// 设置最后消息文本
	function setLastMsgText(msgObj, isConversationList) {
		// 获取消息类型
		var objectName = msgObj.objectName;
		var returnMsg = "";
		switch (objectName) {
			// 文本类型
			case "RC:TxtMsg":
				if (isConversationList) {
					returnMsg = "[文本消息]：" + msgObj.latestMessage.text;
				} else {
					returnMsg = "[文本消息]：" + msgObj.content.text;
				}
				break;
				// 语音类型
			case "RC:VcMsg":
				returnMsg = "[语音消息]：";
				break;
				// 图片消息
			case "RC:ImgMsg":
				returnMsg = "[图片消息]：";
				break;
				// 图文消息
			case "RC:ImgTextMsg":
				returnMsg = "[图文消息]：" + msgObj.latestMessage.title;
				break;
		}
		return returnMsg;
	}

	// 融云发送信息成功后更新会话
	function sendMsgSuccessEnd(ret) {
		//			// 接收者ID
		//			var targetId = ret.result.message.targetId;
		//			// 判断该会话是否存在了，如果存在就上移并更新数据
		//			var specificMsgLi = $api.domAll($api.byId("msglist"), "ul li[data-targetId='" + targetId + "']");
		//			if (specificMsgLi.length > 0) {
		//				var lastMsgText = setLastMsgText(ret.result.message, false);
		//				$api.text($api.dom(specificMsgLi[0], ".msgnr"), lastMsgText);
		//				$api.byId("cloneDiv").appendChild(specificMsgLi[0]);
		//				var cloneHtmlStr = $api.html($api.byId("cloneDiv"));
		//				$api.remove(specificMsgLi[0]);
		//				$api.prepend($api.dom($api.byId("msglist"), "ul"), cloneHtmlStr);
		//			} else {
		//				// 插入新的
		//				var msgObj = ret.result.message;
		//				getUserByID(targetId, msgObj);
		//			}
		//保存信息至自己服务器
		saveMsgToOwnServer(ret);
		// 移除消息
		$api.rmStorage((ret.result.message.messageId).toString());
	}

	function initDotUI(_isShow) {
		if (_isShow) {
			if ($api.hasCls($api.dom(".aui-dot"), "aui-hide")) {
				$api.removeCls($api.dom(".aui-dot"), "aui-hide");
			}
		} else {
			if (!$api.hasCls($api.dom(".aui-dot"), "aui-hide")) {
				$api.addCls($api.dom(".aui-dot"), "aui-hide");
			}
		}
	}

	function initData() {
		userInfo = $api.getStorage("userInfoKey"); //用户信息
		api.setFullScreen({
			fullScreen: false
		});
		$api.fixTabBar($api.dom("body"));
		//			console.log("userInfo:" + $api.jsonToStr(userInfo));
		//			$api.attr($api.dom(".user-icon"), "src", userInfo.icon);
		api.parseTapmode();
	}

	var isStatusFront = "True";
	var isOnline = true;
	var userInfo;
	var buttons = [];
	var currentAjaxTag;
	var isRequesting = false;
	// 1、申明融云对象
	var rong = null,
		userJson = null,
		users = [],
		isFirst = true;
	var rongUnreadMessageCount = 0;
	var systemUnreadMessageCount = 0;
	var mnPopups;
	var isMNPopupsOpend = false;
	//		var allGoodIdData; //当前用户能查看的所有鞋子相关数据(包括:鞋子序号seq, 鞋子货号goodId, 鞋子类别categorySeq)
	apiready = function() {
		initData();
		// api.addEventListener({
		// 	name: 'navbackbtn'
		// }, function(ret, err) {
		// 	alert('点击了返回按钮');
		// 	api.closeWin();
		// });
		//
		// api.addEventListener({
		// 	name: 'navitembtn'
		// }, function(ret, err) {
		// 	if (ret.type == 'right') {
		// 		alert('点击了右边按钮');
		// 	}
		// });
		//			initUnreadMessageDotUI();

		_addEventListener("userInfoUpdateKey", function(ret, err) {
			userInfo = $api.getStorage("userInfoKey");
			initData();
		});

		api.addEventListener({
			name: 'smartupdatefinish'
		}, function(ret, err) {
			setTimeout(function() {
				var message = "已下载更新，系统将在5秒后重启！";
				openTipsFrm(message);
				setTimeout(function() {
					closeTipsFrm();
				}, 4000);
				setTimeout(function() {
					api.rebootApp();
				}, 5000);
			}, 1000);
		});

		_addEventListener("keyback", function(ret) {
			api.closeWidget();
		});

		_addEventListener("offline", function(ret) {
			isOnline = false;
			var message = "网络不给力，请检查网络设置。";
			openTipsFrm(message);
		});

		_addEventListener("online", function(ret) {
			isOnline = true;
			closeTipsFrm();
			setTimeout(function() {
				if (isStatusFront == "True") {}
			}, 300);
		});

		_addEventListener("pause", function(ret) {
			console.log("pause");
			//				alert("pause");
			api.closeFrame({
				name: "more_frm"
			});
		});

		_addEventListener("resume", function(ret) {
			console.log("resume");
			if (isStatusFront == "True" && isOnline) {}

		});

		_addEventListener("viewdisappear", function(ret) {
			//				alert("viewdisappear");
			//如果有视频正在播放,则暂停
			_execScript(api.winName, "tab_content_1", "pauseVideo();");

			api.closeFrame({
				name: "more_frm"
			});
		});

		_addEventListener("viewappear", function(ret) {
			// console.log("viewappear");
			//如果有视频正暂停,则播放
		});

		_addEventListener("systemUnreadMessageCountChangedEvent", function(ret) {
			console.log("系统未读消息改变事件     ret:" + $api.jsonToStr(ret));
			systemUnreadMessageCount = ret.value.systemUnreadMessageCount;
			//				initUnreadMessageDotUI();
		});
		// 2.0 引入融云模块
		rong = api.require('rongCloud2');
		/************************/
		_addEventListener("receiveMessage", function(ret) {
			if (ret && ret.value) {
				rong_getConversationList();
				//					var message = ret.value;
				//					console.log("message:" + $api.jsonToStr(message));
				//					if (!isFirst) {
				//						// 发送者ID
				//						var rongID = message.senderUserId;
				//						// 判断是否是单聊
				//						if (message.conversationType == "PRIVATE") {
				//							rongID = message.senderUserId;
				//						}
				//						// 判断是否是群聊
				//						else if (message.conversationType == "GROUP") {
				//							rongID = message.targetId;
				//						}
				//						// 判断该会话是否存在了，如果存在就上移并更新数据
				//						var specificMsgLi = $api.domAll($api.byId("msglist"), "ul li[data-targetId='" + rongID + "']");
				//						if (specificMsgLi.length > 0) {
				//							var lastMsgText = setLastMsgText(message, false);
				//							var receivedTime = _getFormatDate(message.receivedTime, "yyyy-MM-dd HH:mm:ss");
				//							//							var receivedTime = _formatDate(message.receivedTime);
				//							$api.text($api.dom(specificMsgLi[0], ".msgnr"), lastMsgText);
				//							$api.text($api.dom(specificMsgLi[0], ".btime"), receivedTime);
				//							$api.byId("cloneDiv").appendChild(specificMsgLi[0]);
				//							var cloneHtmlStr = $api.html($api.byId("cloneDiv"));
				//							$api.remove(specificMsgLi[0]);
				//							$api.prepend($api.dom($api.byId("msglist"), "ul"), cloneHtmlStr);
				//						} else {
				//							// 插入新的
				//							getUserByID(rongID, message);
				//						}
				//					}
			}
		});
		/************************/
		// 15 获取用户信息
		userJson = $api.getStorage("userInfoKey");
		// 9.0 监听是否需要发送消息
		_addEventListener("sendMsgStart", function(ret) {
			if (ret && ret.value) {
				var msg = ret.value;
				console.log("msg:" + $api.jsonToStr(msg));
				// 调用统一接口发送信息
				rong_sendMsg(msg.msgType, msg.conversationType, msg.targetId, msg.content, msg.extra);
			}
		});
		// 12. 监听用户信息更新时，重新初始化
		_addEventListener(window.userInfoUpdateKey, function(ret) {
			// 18、重新获取数据
			api.refreshHeaderLoading();
		});
		// 14、监听是否会话需要获取最新消息
		_addEventListener("getNewMsgStart", function(ret) {
			if (ret && ret.value) {
				var msg = ret.value;
				// 获取最新消息
				rong_getLatestMessages(msg.conversationType, msg.targetId);
			}
		});
		setTimeout(function() {
			rong_getConversationList();
		}, 2000);

		// 17、监听是否会话需要获取历史消息
		_addEventListener("getHistoryMsgStart", function(ret) {
			if (ret && ret.value) {
				var msg = ret.value;
				// 获取最新消息
				rong_getHistoryMessages(msg.conversationType, msg.targetId, msg.oldestMessageId);
			}
		});
		// 24 监听是否加入群
		_addEventListener("joinGroupStart", function(ret) {
			if (ret && ret.value) {
				var msg = ret.value;
				// 加入
				rong_joinGroup(msg.groupId, msg.groupName);
			}
		});
		// 25、移除该会话
		_addEventListener("removeChatStart", function(ret) {
			if (ret && ret.value) {
				var msg = ret.value;
				// 移除
				rong_removeConversation(msg.conversationType, msg.targetId);
				// 重新加载会话
				api.refreshHeaderLoading();
			}
		});
		// 26 退出群监听
		_addEventListener("quitGroupStart", function(ret) {
			if (ret && ret.value) {
				var msg = ret.value;
				// 退出
				rong_quitGroup(msg.groupId);
			}
		});
		// 27、清除未读记录数
		_addEventListener("clearMessages", function(ret) {
			if (ret && ret.value) {
				console.log("clearMessages.ret:" + $api.jsonToStr(ret));
				var msg = ret.value;
				rong_clearMessagesUnreadStatus(msg.conversationType, msg.targetId);
				// 重新加载会话
				rong_getConversationList();
			}
		});
		//28、购物车监听
		_addEventListener("updateDotEvent", function(ret, err) {
			if (ret.value.cartNum != 0) {
				initDotUI(true);
			} else {
				initDotUI(false);
			}
		});
		// //监听tabLayout中导航栏左右两边自定义按钮点击事件，字符串类型
		// api.addEventListener({
		// 	name: 'navitembtn'
		// }, function(ret, err) {
		// 	console.log("navitembtn-->ret:" + $api.jsonToStr(ret));
		// 	switch (ret.type) {
		// 		case "left":
		// 			_execScript("nav-tab", "tab_content_1", "openScanner()");
		// 			break;
		// 		case "right":
		// 			_execScript("nav-tab", "tab_content_1", "openSearchWin()");
		// 			break;
		// 		default:
		//
		// 	}
		// });
		//监听tabLayout中tabBar项的点击事件。默认点击每一项时会切换到对应的页面，如果监听了此事件则页面不会自动切换过去，可以通过setTabBarAttr设置选中项，字符串类型
		api.addEventListener({
			name: 'tabitembtn'
		}, function(ret, err) {
			console.log("tabitembtn-->ret:" + $api.jsonToStr(ret));
			if (ret.index != 0) {
				var userInfo = $api.getStorage("userInfoKey");
				if (_isObjectNull(userInfo)) {
					visitorAlert("");
				} else {
					api.setTabBarAttr({
						index: ret.index,
						// background:"#ffff00",
						// shadow:"#0ff",
						// color:"#0ff",
						// selectedColor:"#0f0",
						// fontSize:20,
						// textOffset:10,
					});
				}
				if (ret.index!=1) {
					// console.log(2);
					setTimeout(function(){
						_execScript('tab','tab_content_2','closeFrmGroup();');
					},300)

				}else {
					setTimeout(function(){
						_execScript('tab','tab_content_2','_reOpenFrmGroup();');
						},300)

				}
				if (ret.index == 3) {
					api.setStatusBarStyle({
						style: 'light',
						animated: true,
						color: "rgba(255,255,255,0)"
					});
				} else {
					api.setStatusBarStyle({
						style: 'dark',
						animated: true,
						color: "rgba(255,255,255,0)"
					});

				}
			} else {
				api.setTabBarAttr({
					index: ret.index,
					// background:"#ffff00",
					// shadow:"#0ff",
					// color:"#0ff",
					// selectedColor:"#0f0",
					// fontSize:20,
					// textOffset:10,
				});
				api.setStatusBarStyle({
					style: 'dark',
					animated: true,
					color: "rgba(255,255,255,0)"
				});
				setTimeout(function(){
					_execScript('tab','tab_content_2','closeFrmGroup();');
				},300)
			}

		});
	};
</script>

</html>
